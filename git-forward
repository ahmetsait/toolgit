#!/usr/bin/env bash

app_name="$(basename "${BASH_SOURCE[0]}")"
app_dir="$(dirname "${BASH_SOURCE[0]}")"

print_help() {
	expand -t 4 << EOF
Usage:
	$app_name [REMOTE]
		Fetch and fast forward all remote tracking branches.
		If a remote is given, tries to update from remote branches with the same name.

Options:
	-?, --help
		Show this help information and exit.
EOF
}

args=()

for ((i = 1; i <= $#; i++)); do
	opt="${!i}"
	case "$opt" in
		-\?|--help)
			print_help
			exit 0
			;;
		--)
			args+=("${@:i+1}")
			break
			;;
		-*)
			echo "$app_name: [Error] Unknown option: $1" >&2
			exit 1
			;;
		*)
			args+=("$opt")
			;;
	esac
done

if [[ ${#args[@]} -eq 1 ]]; then
	remote="${args[0]}"
elif [[ ${#args[@]} -gt 1 ]]; then
	echo "$app_name: [Error] Too many arguments." >&2
	echo "Try '$app_name -?' for more information." >&2
	exit 2
fi

git rev-parse --git-dir > /dev/null || exit $?

interrupt () {
	echo "Interrupted."
	exit 1
}

trap interrupt INT

git fetch --all &&
current_branch="$(git rev-parse --abbrev-ref HEAD)" &&
for branch in $(git branch --list --format="%(refname:short)"); do
	if [[ -v remote ]]; then
		upstream="$remote/$(git rev-parse --verify --quiet --abbrev-ref "$branch")"
		has_upstream=0
	else
		upstream="$(git rev-parse --verify --quiet --abbrev-ref "$branch@{upstream}")"
		has_upstream="$?"
	fi
	if [[ has_upstream -eq 0 ]]; then
		branch_sha="$(git rev-parse --quiet --verify "$branch")" &&
		upstream_sha="$(git rev-parse --quiet --verify "$upstream")" &&
		if git merge-base --is-ancestor "$upstream_sha" "$branch_sha"; then
			abbrev="${upstream%/$branch}"
			echo "${branch@Q} is already up to date with ${abbrev@Q}."
			continue
		fi &&
		if [[ "$branch" == "$current_branch" ]]; then
			if [[ -v remote ]]; then
				git pull --ff-only --quiet "$remote" "$branch"
			else
				git pull --ff-only --quiet
			fi
		else
			git fetch . --quiet "$upstream:$branch"
		fi &&
		echo "Updated ${branch@Q} -> ${upstream@Q}" ||
		echo "Cannot fast forward ${branch@Q} to ${upstream@Q}"
	fi
done
